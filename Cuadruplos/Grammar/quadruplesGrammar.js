/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var quadruplesGrammar = (function() {
    var o = function(k, v, o, l) { for (o = o || {}, l = k.length; l--; o[k[l]] = v); return o },
        $V0 = [1, 24],
        $V1 = [1, 23],
        $V2 = [1, 15],
        $V3 = [1, 12],
        $V4 = [1, 16],
        $V5 = [1, 17],
        $V6 = [1, 26],
        $V7 = [1, 27],
        $V8 = [1, 28],
        $V9 = [1, 29],
        $Va = [1, 30],
        $Vb = [1, 31],
        $Vc = [1, 18],
        $Vd = [1, 19],
        $Ve = [1, 20],
        $Vf = [1, 21],
        $Vg = [1, 22],
        $Vh = [5, 18, 20, 24, 27, 30, 32, 41, 42, 43, 44, 45, 46, 52, 53, 54, 55, 56],
        $Vi = [5, 18, 20, 24, 27, 29, 30, 32, 41, 42, 43, 44, 45, 46, 52, 53, 54, 55, 56],
        $Vj = [1, 52],
        $Vk = [1, 53],
        $Vl = [1, 49],
        $Vm = [1, 50],
        $Vn = [1, 54],
        $Vo = [1, 55],
        $Vp = [1, 56],
        $Vq = [5, 18, 19, 20, 24, 27, 29, 30, 32, 35, 41, 42, 43, 44, 45, 46, 52, 53, 54, 55, 56],
        $Vr = [5, 18, 19, 20, 24, 27, 29, 30, 32, 41, 42, 43, 44, 45, 46, 52, 53, 54, 55, 56],
        $Vs = [18, 20, 24, 29, 30, 32, 41, 42, 43, 44, 45, 46, 52, 53, 54, 55, 56];
    var parser = {
        trace: function trace() {},
        yy: {},
        symbols_: { "error": 2, "INICIO": 3, "ELEMENTOS": 4, "EOF": 5, "ELEMENTO": 6, "INSTRUCCION": 7, "METODO": 8, "INSTRUCCIONES": 9, "SALTOS": 10, "ASIGNACION": 11, "LLAMADA": 12, "PRINT": 13, "OPERACION": 14, "ETIQUETA": 15, "CONDICIONAL": 16, "INCONDICIONAL": 17, "salto": 18, ",": 19, "etiqueta": 20, "TIPOSALTO": 21, "VALOR": 22, ":": 23, "=": 24, "ESTRUCTURA": 25, "VARIABLE": 26, "begin": 27, "identificador": 28, "end": 29, "llamada": 30, "invalue": 31, "imprimir": 32, "(": 33, "PARAMETROPRINT": 34, ")": 35, "cadenaprint": 36, "enteroprint": 37, "decimalprint": 38, "stack": 39, "heap": 40, "je": 41, "jne": 42, "jg": 43, "jl": 44, "jge": 45, "jle": 46, "entero": 47, "decimal": 48, "temporal": 49, "punteroHeap": 50, "punteroStack": 51, "+": 52, "-": 53, "*": 54, "/": 55, "%": 56, "$accept": 0, "$end": 1 },
        terminals_: { 2: "error", 5: "EOF", 18: "salto", 19: ",", 20: "etiqueta", 23: ":", 24: "=", 27: "begin", 28: "identificador", 29: "end", 30: "llamada", 31: "invalue", 32: "imprimir", 33: "(", 35: ")", 36: "cadenaprint", 37: "enteroprint", 38: "decimalprint", 39: "stack", 40: "heap", 41: "je", 42: "jne", 43: "jg", 44: "jl", 45: "jge", 46: "jle", 47: "entero", 48: "decimal", 49: "temporal", 50: "punteroHeap", 51: "punteroStack", 52: "+", 53: "-", 54: "*", 55: "/", 56: "%" },
        productions_: [0, [3, 2],
            [4, 2],
            [4, 1],
            [6, 1],
            [6, 1],
            [9, 2],
            [9, 1],
            [7, 1],
            [7, 1],
            [7, 1],
            [7, 1],
            [7, 1],
            [7, 1],
            [10, 1],
            [10, 1],
            [16, 5],
            [17, 7],
            [15, 2],
            [11, 7],
            [11, 6],
            [11, 7],
            [8, 11],
            [8, 10],
            [12, 5],
            [12, 5],
            [13, 6],
            [34, 1],
            [34, 1],
            [34, 1],
            [25, 1],
            [25, 1],
            [21, 1],
            [21, 1],
            [21, 1],
            [21, 1],
            [21, 1],
            [21, 1],
            [22, 1],
            [22, 1],
            [22, 1],
            [26, 1],
            [26, 1],
            [26, 1],
            [14, 7],
            [14, 7],
            [14, 7],
            [14, 7],
            [14, 7]
        ],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */ , $$ /* vstack */ , _$ /* lstack */ ) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:
                    return new AST($$[$0 - 1]);
                    break;
                case 2:

                    if ($$[$0] instanceof Metodo) {
                        this.$ = $$[$0 - 1];
                        this.$ = this.$.concat($$[$0].instruccionesMetodo);
                    } else {
                        this.$ = $$[$0 - 1];
                        this.$.push($$[$0]);
                    }

                    break;
                case 3:

                    if ($$[$0] instanceof Metodo) {
                        this.$ = $$[$0].instruccionesMetodo;;
                    } else {
                        this.$ = [$$[$0]];
                    }

                    break;
                case 4:
                case 5:
                case 8:
                case 9:
                case 10:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 27:
                case 28:
                case 29:
                case 30:
                case 31:
                case 32:
                case 33:
                case 34:
                case 35:
                case 36:
                case 37:
                case 40:
                    this.$ = $$[$0];
                    break;
                case 6:
                    this.$ = $$[$0 - 1];
                    this.$.push($$[$0]);
                    break;
                case 7:
                    this.$ = [$$[$0]];
                    break;
                case 16:
                    this.$ = new SaltoCondicional($$[$0], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 17:
                    this.$ = new SaltoIncondicional($$[$0 - 6], $$[$0 - 4], $$[$0 - 2], $$[$0], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 18:
                    this.$ = new Etiqueta($$[$0 - 1], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 19:
                    this.$ = new AsignacionEstructura($$[$0 - 4], $$[$0 - 2], $$[$0], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 20:
                    this.$ = new Asignacion($$[$0], $$[$0 - 3], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 21:
                    this.$ = new AccesoEstructura($$[$0 - 4], $$[$0 - 2], $$[$0], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 22:
                    this.$ = new Metodo($$[$0 - 6], $$[$0 - 5], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 23:
                    this.$ = new Metodo($$[$0 - 5], [], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 24:
                    this.$ = new Llamada($$[$0], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 25:
                    this.$ = new Invalue(yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 26:
                    this.$ = new Print($$[$0 - 3], $$[$0 - 1], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 38:
                    this.$ = new Primitivo(Number($$[$0]), yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 39:
                    console.log($$[$0]);
                    this.$ = new Primitivo(Number($$[$0]), yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 41:
                case 42:
                case 43:
                    this.$ = new Identificador($$[$0], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
                case 44:
                case 45:
                case 46:
                case 47:
                case 48:
                    this.$ = new Operacion($$[$0 - 6], $$[$0 - 4], $$[$0 - 2], $$[$0], yylineno + 1, _$[_$.length - 1].last_column + 1);
                    break;
            }
        },
        table: [{ 3: 1, 4: 2, 6: 3, 7: 4, 8: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 13, 17: 14, 18: $V0, 20: $V1, 21: 25, 24: $V2, 27: $V3, 30: $V4, 32: $V5, 41: $V6, 42: $V7, 43: $V8, 44: $V9, 45: $Va, 46: $Vb, 52: $Vc, 53: $Vd, 54: $Ve, 55: $Vf, 56: $Vg }, { 1: [3] }, { 5: [1, 32], 6: 33, 7: 4, 8: 5, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 13, 17: 14, 18: $V0, 20: $V1, 21: 25, 24: $V2, 27: $V3, 30: $V4, 32: $V5, 41: $V6, 42: $V7, 43: $V8, 44: $V9, 45: $Va, 46: $Vb, 52: $Vc, 53: $Vd, 54: $Ve, 55: $Vf, 56: $Vg }, o($Vh, [2, 3]), o($Vh, [2, 4]), o($Vh, [2, 5]), o($Vi, [2, 8]), o($Vi, [2, 9]), o($Vi, [2, 10]), o($Vi, [2, 11]), o($Vi, [2, 12]), o($Vi, [2, 13]), { 19: [1, 34] }, o($Vi, [2, 14]), o($Vi, [2, 15]), { 19: [1, 35] }, { 19: [1, 36] }, { 33: [1, 37] }, { 19: [1, 38] }, { 19: [1, 39] }, { 19: [1, 40] }, { 19: [1, 41] }, { 19: [1, 42] }, { 23: [1, 43] }, { 19: [1, 44] }, { 19: [1, 45] }, { 19: [2, 32] }, { 19: [2, 33] }, { 19: [2, 34] }, { 19: [2, 35] }, { 19: [2, 36] }, { 19: [2, 37] }, { 1: [2, 1] }, o($Vh, [2, 2]), { 19: [1, 46] }, { 22: 47, 25: 48, 26: 51, 39: $Vj, 40: $Vk, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 19: [1, 57] }, { 34: 58, 36: [1, 59], 37: [1, 60], 38: [1, 61] }, { 22: 62, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 22: 63, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 22: 64, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 22: 65, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 22: 66, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, o($Vi, [2, 18]), { 19: [1, 67] }, { 22: 68, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 19: [1, 69] }, { 19: [1, 70] }, { 19: [1, 71] }, o($Vq, [2, 38]), o($Vq, [2, 39]), o($Vq, [2, 40]), o($Vr, [2, 30]), o($Vr, [2, 31]), o($Vq, [2, 41]), o($Vq, [2, 42]), o($Vq, [2, 43]), { 19: [1, 72] }, { 19: [1, 73] }, { 19: [2, 27] }, { 19: [2, 28] }, { 19: [2, 29] }, { 19: [1, 74] }, { 19: [1, 75] }, { 19: [1, 76] }, { 19: [1, 77] }, { 19: [1, 78] }, { 19: [1, 79] }, { 19: [1, 80] }, { 28: [1, 81] }, { 19: [1, 83], 22: 82, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 22: 84, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 28: [1, 85], 31: [1, 86] }, { 22: 87, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 22: 88, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 22: 89, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 22: 90, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 22: 91, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 22: 92, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 20: [1, 93] }, { 22: 94, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 7: 97, 9: 95, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 13, 17: 14, 18: $V0, 20: $V1, 21: 25, 24: $V2, 29: [1, 96], 30: $V4, 32: $V5, 41: $V6, 42: $V7, 43: $V8, 44: $V9, 45: $Va, 46: $Vb, 52: $Vc, 53: $Vd, 54: $Ve, 55: $Vf, 56: $Vg }, { 19: [1, 98] }, { 22: 99, 26: 51, 47: $Vl, 48: $Vm, 49: $Vn, 50: $Vo, 51: $Vp }, { 19: [1, 100] }, o($Vi, [2, 24]), o($Vi, [2, 25]), { 35: [1, 101] }, { 19: [1, 102] }, { 19: [1, 103] }, { 19: [1, 104] }, { 19: [1, 105] }, { 19: [1, 106] }, o($Vi, [2, 16]), { 19: [1, 107] }, { 7: 109, 10: 6, 11: 7, 12: 8, 13: 9, 14: 10, 15: 11, 16: 13, 17: 14, 18: $V0, 20: $V1, 21: 25, 24: $V2, 29: [1, 108], 30: $V4, 32: $V5, 41: $V6, 42: $V7, 43: $V8, 44: $V9, 45: $Va, 46: $Vb, 52: $Vc, 53: $Vd, 54: $Ve, 55: $Vf, 56: $Vg }, { 19: [1, 110] }, o($Vs, [2, 7]), { 25: 111, 39: $Vj, 40: $Vk }, o($Vi, [2, 20]), { 26: 112, 49: $Vn, 50: $Vo, 51: $Vp }, o($Vi, [2, 26]), { 26: 113, 49: $Vn, 50: $Vo, 51: $Vp }, { 26: 114, 49: $Vn, 50: $Vo, 51: $Vp }, { 26: 115, 49: $Vn, 50: $Vo, 51: $Vp }, { 26: 116, 49: $Vn, 50: $Vo, 51: $Vp }, { 26: 117, 49: $Vn, 50: $Vo, 51: $Vp }, { 20: [1, 118] }, { 19: [1, 119] }, o($Vs, [2, 6]), { 19: [1, 120] }, o($Vi, [2, 19]), o($Vi, [2, 21]), o($Vi, [2, 44]), o($Vi, [2, 45]), o($Vi, [2, 46]), o($Vi, [2, 47]), o($Vi, [2, 48]), o($Vi, [2, 17]), { 19: [1, 121] }, { 19: [1, 122] }, { 19: [1, 123] }, { 28: [1, 124] }, { 28: [1, 125] }, o($Vh, [2, 23]), o($Vh, [2, 22])],
        defaultActions: { 26: [2, 32], 27: [2, 33], 28: [2, 34], 29: [2, 35], 30: [2, 36], 31: [2, 37], 32: [2, 1], 59: [2, 27], 60: [2, 28], 61: [2, 29] },
        parseError: function parseError(str, hash) {
            if (hash.recoverable) {
                this.trace(str);
            } else {
                var error = new Error(str);
                error.hash = hash;
                throw error;
            }
        },
        parse: function parse(input) {
            var self = this,
                stack = [0],
                tstack = [],
                vstack = [null],
                lstack = [],
                table = this.table,
                yytext = '',
                yylineno = 0,
                yyleng = 0,
                recovering = 0,
                TERROR = 2,
                EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            var lexer = Object.create(this.lexer);
            var sharedState = { yy: {} };
            for (var k in this.yy) {
                if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
                    sharedState.yy[k] = this.yy[k];
                }
            }
            lexer.setInput(input, sharedState.yy);
            sharedState.yy.lexer = lexer;
            sharedState.yy.parser = this;
            if (typeof lexer.yylloc == 'undefined') {
                lexer.yylloc = {};
            }
            var yyloc = lexer.yylloc;
            lstack.push(yyloc);
            var ranges = lexer.options && lexer.options.ranges;
            if (typeof sharedState.yy.parseError === 'function') {
                this.parseError = sharedState.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }

            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            _token_stack:
                var lex = function() {
                    var token;
                    token = lexer.lex() || EOF;
                    if (typeof token !== 'number') {
                        token = self.symbols_[token] || token;
                    }
                    return token;
                };
            var symbol, preErrorSymbol, state, action, a, r, yyval = {},
                p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(lexer.yytext);
                        lstack.push(lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = lexer.yyleng;
                            yytext = lexer.yytext;
                            yylineno = lexer.yylineno;
                            yyloc = lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            sharedState.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }
    };
    /* generated by jison-lex 0.3.4 */
    var lexer = (function() {
        var lexer = ({

            EOF: 1,

            parseError: function parseError(str, hash) {
                if (this.yy.parser) {
                    this.yy.parser.parseError(str, hash);
                } else {
                    throw new Error(str);
                }
            },

            // resets the lexer, sets new input
            setInput: function(input, yy) {
                this.yy = yy || this.yy || {};
                this._input = input;
                this._more = this._backtrack = this.done = false;
                this.yylineno = this.yyleng = 0;
                this.yytext = this.matched = this.match = '';
                this.conditionStack = ['INITIAL'];
                this.yylloc = {
                    first_line: 1,
                    first_column: 0,
                    last_line: 1,
                    last_column: 0
                };
                if (this.options.ranges) {
                    this.yylloc.range = [0, 0];
                }
                this.offset = 0;
                return this;
            },

            // consumes and returns one char from the input
            input: function() {
                var ch = this._input[0];
                this.yytext += ch;
                this.yyleng++;
                this.offset++;
                this.match += ch;
                this.matched += ch;
                var lines = ch.match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno++;
                    this.yylloc.last_line++;
                } else {
                    this.yylloc.last_column++;
                }
                if (this.options.ranges) {
                    this.yylloc.range[1]++;
                }

                this._input = this._input.slice(1);
                return ch;
            },

            // unshifts one char (or a string) into the input
            unput: function(ch) {
                var len = ch.length;
                var lines = ch.split(/(?:\r\n?|\n)/g);

                this._input = ch + this._input;
                this.yytext = this.yytext.substr(0, this.yytext.length - len);
                //this.yyleng -= len;
                this.offset -= len;
                var oldLines = this.match.split(/(?:\r\n?|\n)/g);
                this.match = this.match.substr(0, this.match.length - 1);
                this.matched = this.matched.substr(0, this.matched.length - 1);

                if (lines.length - 1) {
                    this.yylineno -= lines.length - 1;
                }
                var r = this.yylloc.range;

                this.yylloc = {
                    first_line: this.yylloc.first_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.first_column,
                    last_column: lines ?
                        (lines.length === oldLines.length ? this.yylloc.first_column : 0) +
                        oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len
                };

                if (this.options.ranges) {
                    this.yylloc.range = [r[0], r[0] + this.yyleng - len];
                }
                this.yyleng = this.yytext.length;
                return this;
            },

            // When called from action, caches matched text and appends it on next action
            more: function() {
                this._more = true;
                return this;
            },

            // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject: function() {
                if (this.options.backtrack_lexer) {
                    this._backtrack = true;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });

                }
                return this;
            },

            // retain first n characters of the match
            less: function(n) {
                this.unput(this.match.slice(n));
            },

            // displays already matched input, i.e. for error messages
            pastInput: function() {
                var past = this.matched.substr(0, this.matched.length - this.match.length);
                return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\n/g, "");
            },

            // displays upcoming input, i.e. for error messages
            upcomingInput: function() {
                var next = this.match;
                if (next.length < 20) {
                    next += this._input.substr(0, 20 - next.length);
                }
                return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
            },

            // displays the character position where the lexing error occurred, i.e. for error messages
            showPosition: function() {
                var pre = this.pastInput();
                var c = new Array(pre.length + 1).join("-");
                return pre + this.upcomingInput() + "\n" + c + "^";
            },

            // test the lexed token: return FALSE when not a match, otherwise return token
            test_match: function(match, indexed_rule) {
                var token,
                    lines,
                    backup;

                if (this.options.backtrack_lexer) {
                    // save context
                    backup = {
                        yylineno: this.yylineno,
                        yylloc: {
                            first_line: this.yylloc.first_line,
                            last_line: this.last_line,
                            first_column: this.yylloc.first_column,
                            last_column: this.yylloc.last_column
                        },
                        yytext: this.yytext,
                        match: this.match,
                        matches: this.matches,
                        matched: this.matched,
                        yyleng: this.yyleng,
                        offset: this.offset,
                        _more: this._more,
                        _input: this._input,
                        yy: this.yy,
                        conditionStack: this.conditionStack.slice(0),
                        done: this.done
                    };
                    if (this.options.ranges) {
                        backup.yylloc.range = this.yylloc.range.slice(0);
                    }
                }

                lines = match[0].match(/(?:\r\n?|\n).*/g);
                if (lines) {
                    this.yylineno += lines.length;
                }
                this.yylloc = {
                    first_line: this.yylloc.last_line,
                    last_line: this.yylineno + 1,
                    first_column: this.yylloc.last_column,
                    last_column: lines ?
                        lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length
                };
                this.yytext += match[0];
                this.match += match[0];
                this.matches = match;
                this.yyleng = this.yytext.length;
                if (this.options.ranges) {
                    this.yylloc.range = [this.offset, this.offset += this.yyleng];
                }
                this._more = false;
                this._backtrack = false;
                this._input = this._input.slice(match[0].length);
                this.matched += match[0];
                token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
                if (this.done && this._input) {
                    this.done = false;
                }
                if (token) {
                    return token;
                } else if (this._backtrack) {
                    // recover context
                    for (var k in backup) {
                        this[k] = backup[k];
                    }
                    return false; // rule action called reject() implying the next rule should be tested instead.
                }
                return false;
            },

            // return next match in input
            next: function() {
                if (this.done) {
                    return this.EOF;
                }
                if (!this._input) {
                    this.done = true;
                }

                var token,
                    match,
                    tempMatch,
                    index;
                if (!this._more) {
                    this.yytext = '';
                    this.match = '';
                }
                var rules = this._currentRules();
                for (var i = 0; i < rules.length; i++) {
                    tempMatch = this._input.match(this.rules[rules[i]]);
                    if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                        match = tempMatch;
                        index = i;
                        if (this.options.backtrack_lexer) {
                            token = this.test_match(tempMatch, rules[i]);
                            if (token !== false) {
                                return token;
                            } else if (this._backtrack) {
                                match = false;
                                continue; // rule action called reject() implying a rule MISmatch.
                            } else {
                                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                                return false;
                            }
                        } else if (!this.options.flex) {
                            break;
                        }
                    }
                }
                if (match) {
                    token = this.test_match(match, rules[index]);
                    if (token !== false) {
                        return token;
                    }
                    // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                    return false;
                }
                if (this._input === "") {
                    return this.EOF;
                } else {
                    return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                        text: "",
                        token: null,
                        line: this.yylineno
                    });
                }
            },

            // return next match that has a token
            lex: function lex() {
                var r = this.next();
                if (r) {
                    return r;
                } else {
                    return this.lex();
                }
            },

            // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin: function begin(condition) {
                this.conditionStack.push(condition);
            },

            // pop the previously active lexer condition state off the condition stack
            popState: function popState() {
                var n = this.conditionStack.length - 1;
                if (n > 0) {
                    return this.conditionStack.pop();
                } else {
                    return this.conditionStack[0];
                }
            },

            // produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules: function _currentRules() {
                if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
                    return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
                } else {
                    return this.conditions["INITIAL"].rules;
                }
            },

            // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState: function topState(n) {
                n = this.conditionStack.length - 1 - Math.abs(n || 0);
                if (n >= 0) {
                    return this.conditionStack[n];
                } else {
                    return "INITIAL";
                }
            },

            // alias for begin(condition)
            pushState: function pushState(condition) {
                this.begin(condition);
            },

            // return the number of states currently on the stack
            stateStackSize: function stateStackSize() {
                return this.conditionStack.length;
            },
            options: { "case-insensitive": true },
            performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {
                var YYSTATE = YY_START;
                switch ($avoiding_name_collisions) {
                    case 0:
                        /* skip whitespace */
                        break;
                    case 1: //'.*      /* skip comment */
                        break;
                    case 2:
                        /* IGNORE */
                        break;
                    case 3:
                        return 49
                        break;
                    case 4:
                        return 20
                        break;
                    case 5:
                        return 18
                        break;
                    case 6:
                        return 27
                        break;
                    case 7:
                        return 29
                        break;
                    case 8:
                        return 36
                        break;
                    case 9:
                        return 38
                        break;
                    case 10:
                        return 37
                        break;
                    case 11:
                        return 51
                        break;
                    case 12:
                        return 50
                        break;
                    case 13:
                        return 40
                        break;
                    case 14:
                        return 39
                        break;
                    case 15:
                        return 31
                        break;
                    case 16:
                        return 32
                        break;
                    case 17:
                        return 30
                        break;
                    case 18:
                        return 41
                        break;
                    case 19:
                        return 42
                        break;
                    case 20:
                        return 43
                        break;
                    case 21:
                        return 44
                        break;
                    case 22:
                        return 45
                        break;
                    case 23:
                        return 46
                        break;
                    case 24:
                        return 28
                        break;
                    case 25:
                        return 48
                        break;
                    case 26:
                        return 47
                        break;
                    case 27:
                        return 54
                        break;
                    case 28:
                        return 55
                        break;
                    case 29:
                        return 53
                        break;
                    case 30:
                        return 52
                        break;
                    case 31:
                        return 56
                        break;
                    case 32:
                        return 23
                        break;
                    case 33:
                        return 24
                        break;
                    case 34:
                        return 19
                        break;
                    case 35:
                        return 33
                        break;
                    case 36:
                        return 35
                        break;
                    case 37:
                        return 5
                        break;
                    case 38:
                        return 'INVALID'
                        break;
                }
            },
            rules: [/^(?:\s+)/i, /^(?:\/\/.*)/i, /^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i, /^(?:t[0-9]+)/i, /^(?:L[0-9]+)/i, /^(?:jmp\b)/i, /^(?:begin\b)/i, /^(?:end\b)/i, /^(?:%c\b)/i, /^(?:%d\b)/i, /^(?:%e\b)/i, /^(?:P\b)/i, /^(?:H\b)/i, /^(?:Heap\b)/i, /^(?:Stack\b)/i, /^(?:\$_in_value\b)/i, /^(?:print\b)/i, /^(?:call\b)/i, /^(?:je\b)/i, /^(?:jne\b)/i, /^(?:jg\b)/i, /^(?:jl\b)/i, /^(?:jge\b)/i, /^(?:jle\b)/i, /^(?:([Ñña-zA-Z_][Ñña-zA-Z0-9_]*))/i, /^(?:(-?([0-9])+\.([0-9])+))/i, /^(?:(-([0-9])+|([0-9])+))/i, /^(?:\*)/i, /^(?:\/)/i, /^(?:-)/i, /^(?:\+)/i, /^(?:%)/i, /^(?::)/i, /^(?:=)/i, /^(?:,)/i, /^(?:\()/i, /^(?:\))/i, /^(?:$)/i, /^(?:.)/i],
            conditions: { "INITIAL": { "rules": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38], "inclusive": true } }
        });
        return lexer;
    })();
    parser.lexer = lexer;

    function Parser() {
        this.yy = {};
    }
    Parser.prototype = parser;
    parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = quadruplesGrammar;
    exports.Parser = quadruplesGrammar.Parser;
    exports.parse = function() { return quadruplesGrammar.parse.apply(quadruplesGrammar, arguments); };
    exports.main = function commonjsMain(args) {
        if (!args[1]) {
            console.log('Usage: ' + args[0] + ' FILE');
            process.exit(1);
        }
        var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
        return exports.parser.parse(source);
    };
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}